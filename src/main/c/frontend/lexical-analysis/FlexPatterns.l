%{
#include "FlexActions.h"
#include "parser.h" // This should be generated by Bison

%}

%option noyywrap
%option yylineno

%%
"/*"								{ BEGIN(MULTILINE_COMMENT); BeginMultilineCommentLexemeAction(createLexicalAnalyzerContext()); }
<MULTILINE_COMMENT>"*/"				{ EndMultilineCommentLexemeAction(createLexicalAnalyzerContext()); BEGIN(INITIAL); }
<MULTILINE_COMMENT>[[:space:]]+		{ IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<MULTILINE_COMMENT>[^*]+			{ IgnoredLexemeAction(createLexicalAnalyzerContext()); }
<MULTILINE_COMMENT>.				{ IgnoredLexemeAction(createLexicalAnalyzerContext()); }

"{"                         { return JsonBraceLexemeAction(createLexicalAnalyzerContext(), LBRACE); }
"}"                         { return JsonBraceLexemeAction(createLexicalAnalyzerContext(), RBRACE); }
"["                         { return JsonBracketLexemeAction(createLexicalAnalyzerContext(), LBRACKET); }
"]"                         { return JsonBracketLexemeAction(createLexicalAnalyzerContext(), RBRACKET); }
":"                         { return JsonColonLexemeAction(createLexicalAnalyzerContext()); }
","                         { return JsonCommaLexemeAction(createLexicalAnalyzerContext()); }

"CREATE"                    { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), CREATE); }
"SELECT"                    { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), SELECT); }
"FROM"                      { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), FROM); }
"WHERE"                     { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), WHERE); }
"INSERT"                    { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), INSERT); }
"INTO"                      { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), INTO); }
"VALUES"                    { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), VALUES); }
"DELETE"                    { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), DELETE); }
"UPDATE"                    { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), UPDATE); }
"SET"                       { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), SET); }
"GROUP BY"                  { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), GROUP_BY); }
"HAVING"                    { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), HAVING); }
"COUNT"                     { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), COUNT); }
"SUM"                       { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), SUM); }
"AVG"                       { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), AVG); }
"MAX"                       { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), MAX); }
"MIN"                       { return SqlKeywordLexemeAction(createLexicalAnalyzerContext(), MIN); }


"true"                      { return BooleanLexemeAction(createLexicalAnalyzerContext()); }
"false"                     { return BooleanLexemeAction(createLexicalAnalyzerContext()); }
"null"                      { return NullLexemeAction(createLexicalAnalyzerContext()); }

\"(\\.|[^"\\])*\"           { return StringLexemeAction(createLexicalAnalyzerContext());}
[[:digit:]]+				{ return IntegerLexemeAction(createLexicalAnalyzerContext());}
[0-9]+"."[0-9]+             { return FloatLexemeAction(createLexicalAnalyzerContext()); }

[a-zA-Z_][a-zA-Z0-9_]*      { return IdentifierLexemeAction(createLexicalAnalyzerContext()); }

.                           { return yytext[0]; }

%%

#include "FlexExport.h"
